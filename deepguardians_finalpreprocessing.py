# -*- coding: utf-8 -*-
"""DeepGuardians_FinalPreprocessing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/119ttAXVv3Iw_GpqsKP7wEREJnmR4p684

## 0. Import and set the path
"""

import pandas as pd
from sklearn.model_selection import KFold
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.naive_bayes import GaussianNB
import lightgbm as lgb
from sklearn.model_selection import cross_val_score
from sklearn.metrics import roc_auc_score, confusion_matrix, classification_report, f1_score
import numpy as np
import time
import warnings
warnings.filterwarnings('ignore')

#--------------------------------------------------

import kagglehub

# Download latest version
path = kagglehub.dataset_download("asjad99/mimiciii")

print("Path to dataset files:", path)

"""## 1. Import data"""

df_PATIENTS = pd.read_csv('/kaggle/input/mimiciii/mimic-iii-clinical-database-demo-1.4/PATIENTS.csv')
df_CHARTEVENTS = pd.read_csv('/kaggle/input/mimiciii/mimic-iii-clinical-database-demo-1.4/CHARTEVENTS.csv')
df_ADMISSIONS = pd.read_csv('/kaggle/input/mimiciii/mimic-iii-clinical-database-demo-1.4/ADMISSIONS.csv')
df_D_ITEMS = pd.read_csv('/kaggle/input/mimiciii/mimic-iii-clinical-database-demo-1.4/D_ITEMS.csv')

df_ADMISSIONS = df_ADMISSIONS[df_ADMISSIONS['subject_id'] != 10120]
df_PATIENTS = df_PATIENTS[df_PATIENTS['subject_id'] != 10120]

df_PATIENTS = df_PATIENTS.loc[:,['subject_id','gender']]

"""## 2. Eliminate some columns"""

df_ADMISSIONS.drop(columns=['admittime', 'deathtime', 'dob'], inplace=True, errors='ignore')

print(df_PATIENTS.columns)
print(df_CHARTEVENTS.columns)
print(df_ADMISSIONS.columns)

"""## 3. Missing Value Removal"""

# 'value' 컬럼 숫자형으로 변환
df_CHARTEVENTS['value'] = pd.to_numeric(df_CHARTEVENTS['value'], errors='coerce')

# 같은 subject_id의 평균값으로 NaN 채우기
df_CHARTEVENTS['value'] = df_CHARTEVENTS.groupby('subject_id')['value'].transform(
    lambda x: x.fillna(x.mean())
)

# 만약 해당 subject_id의 모든 값이 NaN이면 전체 평균으로 대체
df_CHARTEVENTS['value'].fillna(df_CHARTEVENTS['value'].mean(), inplace=True)

# 결과 확인
print(df_CHARTEVENTS.isna().sum())

'''
# subject_id별 평균으로 NaN 채우기
df_CHARTEVENTS['value'] = df_CHARTEVENTS.groupby('subject_id')['value'].transform(
    lambda x: x.fillna(x.mean())
)

# 그래도 NaN이면 전체 평균으로 대체
df_CHARTEVENTS['value'].fillna(df_CHARTEVENTS['value'].mean(), inplace=True)
'''

# 1) (선택) 분석할 itemid만 필터 – 팀원 예시: 211, 618, 646
vital_ids = {211: 'Heart Rate', 618: 'Resp Rate', 646: 'SpO2'}
df_vitals = df_CHARTEVENTS[df_CHARTEVENTS['itemid'].isin(vital_ids.keys())].copy()

# 2) value 숫자형 & subject_id별 평균으로 1차 NaN 채우기
df_vitals['value'] = pd.to_numeric(df_vitals['value'], errors='coerce')
df_vitals['value'] = (
    df_vitals
    .groupby(['subject_id','itemid'])['value']
    .transform(lambda s: s.fillna(s.mean()))
)
# 3) 그래도 NaN이면 전체 평균으로 2차 채우기
df_vitals['value'].fillna(df_vitals['value'].mean(), inplace=True)

# 4) pivot (subject_id × itemid 평균)
df_pivot = (
    df_vitals
    .pivot_table(index='subject_id',
                 columns='itemid',
                 values='value',
                 aggfunc='mean')
    .reset_index()
    .rename(columns=vital_ids)               # 숫자 대신 라벨 붙이기
)

# 5) pivot 뒤 남은 NaN을 컬럼별 평균으로 채우기
for col in df_pivot.columns[1:]:             # subject_id 제외
    df_pivot[col].fillna(df_pivot[col].mean(), inplace=True)

# 6) Admissions + Patients 병합
df_adm_pat = (
    df_ADMISSIONS.drop(columns=['admittime','deathtime','dob'], errors='ignore')
    .merge(df_PATIENTS[['subject_id','gender']], on='subject_id', how='left')
)

# 7) 최종 병합
df_final = df_adm_pat.merge(df_pivot, on='subject_id', how='left')

# 8) 숫자형 컬럼별 평균으로 한 번 더 NaN 정리
for col in df_final.select_dtypes(include='number').columns:
    df_final[col].fillna(df_final[col].mean(), inplace=True)

# 숫자형 컬럼만 선택
numeric_cols = df_final.select_dtypes(include='number').columns

# 각 컬럼별 평균값으로 NaN 채우기
for col in numeric_cols:
    mean_val = df_final[col].mean()
    df_final[col].fillna(mean_val, inplace=True)

pd.set_option('display.max_rows', None)  # 모든 행 출력
df_final